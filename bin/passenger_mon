#!/usr/bin/env ruby

require 'optparse'
require 'fileutils'

options = {}

op = OptionParser.new do |opts|
  opts.banner = 'Usage: passenger_mon [options]'

  opts.on("-i=SECONDS", "--interval=SECONDS", "Poll interval in seconds (default: 30)") do |interval|
    options[:interval] = interval
  end

  opts.on("-m=MEMORY", "--memory=MB", "Memory threshold in MB (default: 400)") do |mb|
    options[:threshold] = mb
  end

  opts.on("-l=LOG_FILE", "--log=LOG_FILE", "Log file location (default: /var/log/passenger_mon.log)") do |log|
    options[:log] = log
  end

  opts.on("-p=PIDFILE", "--pid=PID_FILE", "Pidfile to write") do |pidfile|
    options[:pidfile] = pidfile
  end

  opts.on_tail("-h", "--help", "show this message") do
    abort(opts.to_s)
  end
end.parse!

# set option defaults
options[:interval]  ||= 30
options[:threshold] ||= 400
options[:log]       ||= "/var/log/passenger_mon.log"
options[:pidfile]   ||= "/tmp/passenger_mon.pid"
options[:threshold] = options[:threshold].to_i


# If a pidfile exists when we start up, we need to remove it.
# This probably means a non-clean shutdown the last time
# the program was shutdown.
if File.exist?(options[:pidfile])
  $stdout.puts "Existing pidfile found. Removing..."
  FileUtils.rm(options[:pidfile])
end

# remove the pidfile on shutdown
at_exit do
  $stdout.puts "Removing pidfile."
  FileUtils.rm(options[:pidfile])
end

# write out the pidfile
File.open(options[:pidfile], 'w') { |f| f.puts($$) }

require 'logger'
logger = Logger.new(options[:log])

Signal.trap('INT') do
  logger.info "Shutting down now..."
  abort("\n")
end

loop do
  logger.info "Checking for naughty processes..."
  
  results = `passenger-memory-stats`
  results = results.split("\n").grep(/Rack/)

  results.each do |res|
    pid, vm_size, vm_size_label, mem_res, *bullshit = res.strip.split(/\s+/)
    if mem_res.to_i >= options[:threshold]
      logger.info "Killing process #{pid} using #{mem_res.to_i}mb of ram (Threshold=#{options[:threshold]}mb)"

      # passenger treats the USR1 signal as a graceful shutdown.
      Process.kill("USR1", pid.to_i)
    end
  end
  
  sleep options[:interval].to_i
end
